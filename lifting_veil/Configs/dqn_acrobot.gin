import dopamine.discrete_domains.gym_lib
import dopamine.jax.networks
import dopamine.discrete_domains.run_experiment
import dopamine.jax.agents.dqn.dqn_agent
import dopamine.replay_memory.prioritized_replay_buffer
import jax
import gin
import agents.networks_new
import agents.dqn_agent_new
import agents.external_configurations
import replay_runner

JaxDQNAgent.observation_shape = %gym_lib.ACROBOT_OBSERVATION_SHAPE
JaxDQNAgent.observation_dtype = %jax_networks.ACROBOT_OBSERVATION_DTYPE
JaxDQNAgent.stack_size = %gym_lib.ACROBOT_STACK_SIZE

JaxDQNAgentNew.gamma = 0.99
JaxDQNAgentNew.update_horizon = 1
JaxDQNAgentNew.min_replay_history = 500
JaxDQNAgentNew.target_update_period = 100

JaxDQNAgentNew.update_period = 4
JaxDQNAgentNew.optimizer = 'adam'
JaxDQNAgentNew.net_conf = 'classic'
JaxDQNAgentNew.env = 'Acrobot'
JaxDQNAgentNew.normalize_obs = True
JaxDQNAgentNew.hidden_layer = 2
JaxDQNAgentNew.neurons = 512
JaxDQNAgentNew.replay_scheme = 'uniform' #'prioritized' or 'uniform'
JaxDQNAgentNew.target_opt = 0 #0:DQN 1:Double DQN 2:Munchausen DQN
JaxDQNAgentNew.mse_inf = True
JaxDQNAgentNew.noisy = False
JaxDQNAgentNew.dueling = False
JaxDQNAgentNew.initzer = @variance_scaling()
variance_scaling.scale=1
variance_scaling.mode='fan_avg'
variance_scaling.distribution='uniform'

JaxDQNAgentNew.layer_funct = 'relu'
JaxDQNAgentNew.normalization = 'non_normalization'

JaxDQNAgentNew.tau = 100
JaxDQNAgentNew.alpha = 1
JaxDQNAgentNew.clip_value_min = -1e3
JaxDQNAgentNew.network = @networks_new.DQNNetwork
JaxDQNAgentNew.epsilon_fn = @dqn_agent.identity_epsilon

create_optimizer = @dqn_agent.create_optimizer
create_optimizer.learning_rate = 0.001
create_optimizer.eps = 3.125e-4

create_gym_environment.environment_name = 'Acrobot'
create_gym_environment.version = 'v1'

TrainRunner.create_environment_fn = @gym_lib.create_gym_environment
Runner.num_iterations = 30
Runner.training_steps = 1000
Runner.max_steps_per_episode = 500

FixedReplayRunner.num_iterations = 30
FixedReplayRunner.training_steps = 1000
FixedReplayRunner.max_steps_per_episode = 500
FixedReplayRunner.evaluation_steps = 1000

OutOfGraphPrioritizedReplayBuffer.replay_capacity = 50000
OutOfGraphPrioritizedReplayBuffer.batch_size = 128
